1/

void push(T item) {
    // TODO: Push new element into the top of the stack
    list.add(0,item);
}

T pop() {
    // TODO: Remove an element on top of the stack
       return list.removeAt(0);
}

T top() {
    // TODO: Get value of the element on top of the stack
        return list.get(0);
}

bool empty() {
    // TODO: Determine if the stack is empty
    return list.empty();
        
}

int size() {
    // TODO: Get the size of the stack
        return list.size();
}

void clear() {
    // TODO: Clear all elements of the stack
    list.clear();
}

2/

void push(T item) {
    // TODO: Push new element into the end of the queue
    list.add(item);
}

T pop() {
    // TODO: Remove an element in the head of the queue
   return list.removeAt(0);
}

T top() {
    // TODO: Get value of the element in the head of the queue
        return list.get(0);
}

bool empty() {
    // TODO: Determine if the queue is empty
        return list.empty();
}

int size() {
    // TODO: Get the size of the queue
        return list.size();
}

void clear() {
    // TODO: Clear all elements of the queue
    list.clear();
}

3/


bool isValidParentheses(string s)
{ 
    stack<char> str;
    char x;
    for (int i = 0; i < (int)s.length(); i++)
    {
        if (s[i] == '(' || s[i] == '['
            || s[i] == '{')
        {
            str.push(s[i]);
        }
        if (str.empty())
            return false;
 
        switch (s[i]) {
        case ')':
            x = str.top();
            str.pop();
            if (x == '{' || x == '[')
                return false;
            break;
 
        case '}':

            x = str.top();
            str.pop();
            if (x == '(' || x == '[')
                return false;
            break;
 
        case ']':

            x = str.top();
            str.pop();
            if (x == '(' || x == '{')
                return false;
            break;
        }
    }
    return  (str.empty());
}

4/

string removeDuplicates(string S){
  int i=0; 
  while(i<(int)S.length())
        {
            if(S.substr(i,1)==S.substr(i+1,1))
                {
                S.erase(i,1);
                S.erase(i,1);
                i=0;
                }else
            i++;
           
        }
    return S;
}

5/
void bfs(vector<vector<int>> graph, int start) {

	queue<int> q;
	q.push(start);	
	int visit[10];
	for (int i = 0; i < 10; i++)
		visit[i] = -1;
	visit[start] = 1;
	while(!q.empty())
	{
		int front = q.front();
		q.pop();
		cout << front<<" ";
		for (int i = 0; i < int (graph[front].size()); i++)
		{ 
			int index = graph[front][i];
			if ( visit[index] == -1)
			{
				visit[index] = 1;
				q.push(index);
			}
		}
	}
}

6/

int baseballScore(string ops){
vector<int>a;
int b,d,c=0;
for(int i=0;i<(int)ops.length();i++)
    {
        if(ops.substr(i,1)=="C")
            a.pop_back();
        else if(ops.substr(i,1)=="D")
            {
                b=a[a.size()-1]*2;
                a.push_back(b);
            }
        else if(ops.substr(i,1)=="+")
            {
                b=a[a.size()-1];
                d=a[a.size()-2];
                b=b+d;
                a.push_back(b);
            }
        else if(ops.substr(i,1)=="0")
            {
            a.push_back(0);
            }
         else if(ops.substr(i,1)=="1")
            {
            a.push_back(1);
            }
             else if(ops.substr(i,1)=="2")
            {
            a.push_back(2);
            }
             else if(ops.substr(i,1)=="3")
            {
            a.push_back(3);
            }
             else if(ops.substr(i,1)=="4")
            {
            a.push_back(4);
            }
             else if(ops.substr(i,1)=="5")
            {
            a.push_back(5);
            }
             else if(ops.substr(i,1)=="6")
            {
            a.push_back(6);
            }
             else if(ops.substr(i,1)=="7")
            {
            a.push_back(7);
            }
             else if(ops.substr(i,1)=="8")
            {
            a.push_back(8);
            }
             else if(ops.substr(i,1)=="9")
            {
            a.push_back(9);
            }
    }
for(int i=0;i<(int)a.size();i++)
    c=c+a[i];
return c;
}


