1.1/

class Graph
{
private:
	int V;
	Adjacency *adj;

public:
	Graph(int V)
	{
		this->V = V;
		adj = new Adjacency[V];
	}
	
	void addEdge(int v, int w)
	{
		adj[v].push(w);
		adj[w].push(v);
	}
	
    void printGraph()
	{
		for (int v = 0; v < V; ++v)
		{
			cout << "\nAdjacency list of vertex " << v << "\nhead ";
			adj[v].print();
		}
	}
	
	Adjacency* BFS(int v)
	{
		list<int> bfs;
		bool* vis = new bool[V];
		for (int j = 0; j < V; j++)
			vis[j] = false;
		vis[v] = true;
		Adjacency* re = new Adjacency(V);
		bfs.push_back(v);
		while (!bfs.empty())
		{
			int ver = bfs.front();
			re->push(ver);
			int _size = adj[ver].getSize();
			bfs.pop_front();
				for (int i=0; i<_size; i++)
				{
					int vertex = adj[ver].getElement(i);
					if (!vis[vertex])
					{
						bfs.push_back(vertex);
						vis[vertex] = true;
					}
				}
		}

		return re;
	}
};

1.2/

class Graph
{
private:
	int V;
	Adjacency *adj;

public:
	Graph(int V)
	{
		this->V = V;
		adj = new Adjacency[V];
	}
	
	void addEdge(int v, int w)
	{
		adj[v].push(w);
		adj[w].push(v);
	}
	
    void printGraph()
	{
		for (int v = 0; v < V; ++v)
		{
			cout << "\nAdjacency list of vertex " << v << "\nhead ";
			adj[v].print();
		}
	}
	
	Adjacency* DFS(int v)
	{
		list<int> bfs; 
		list<int> s; 
		Adjacency* re = new Adjacency;
		bool* vis = new bool[V]; 
		for (int j = 0; j < V; j++)
			vis[j] = false;
		vis[v] = true;
		bfs.push_back(v);
		s.push_back(v);
		re->push(v);
		while (re->getSize() < V)	
		{
			while (!bfs.empty()) 
			{
				int ver = bfs.front();
				int _size = adj[ver].getSize();
				bfs.pop_front();
				for (int i = 0; i < _size; i++)
				{
					int vertex = adj[ver].getElement(i);
					if (vis[vertex]!=true)  
					{
						re->push(vertex);
						bfs.push_back(vertex);
						s.push_back(vertex);
						vis[vertex] = true;
						break; 
					}
				}
			}
			s.pop_back();
			bfs.push_back(s.back()); 
		}
		return re;
	}
};

1.3/

#include<iostream> 
#include <list>
using namespace std;

class DirectedGraph 
{ 
	int V;
	list<int> *adj;
	bool isCyclicUtil(int v, bool visited[], bool *rs);
public: 
	DirectedGraph(){
        V = 0;
        adj = NULL;
    }
	DirectedGraph(int V)
	{
		this->V = V; 
		adj = new list<int>[V];
	}
	void addEdge(int v, int w)
	{
		adj[v].push_back(w);
	}
	bool isCyclic()
{
	bool* vis = new bool[V];
	bool* re = new bool[V];
	for (int i = 0; i < V; i++)
	{
		vis[i] = false;
		re[i] = false;
	}
	for (int i = 0; i < V; i++)
		if (isCyclicUtil(i, vis, re))
			return true;
	return false;
}
}; 
bool DirectedGraph::isCyclicUtil(int v, bool visited[], bool* rs)
{
	if (visited[v] == false)
	{
		visited[v] = true;
		rs[v] = true;
		list<int>::iterator i;
		for (i = adj[v].begin(); i != adj[v].end(); ++i)
		{
			if (!visited[*i] && isCyclicUtil(*i, visited, rs))
				return true;
			else if (rs[*i])
				return true;
		}
	}
	rs[v] = false;
	return false;
}

2.1/

int Dijkstra(int** graph, int src, int dst)
{
	if (src == dst) 
		return 0;
	bool sh[6];		
	for (int i = 0; i < 6; i++)	sh[i] = false;
	int cost[6];				
	for (int j = 0; j < 6; j++)	cost[j] = 0;
	sh[src] = true;
	int start = src;
	
	while (!sh[dst])
	{
		for (int i = 0; i < 6; i++)
		{
			if (sh[i] == false && graph[start][i] != 0 && cost[i] == 0) 
			{
				cost[i] = cost[start] + graph[start][i];  
			}
			else if (sh[i] == false && cost[i] != 0
				&& graph[start][i] !=0 && cost[start] + graph[start][i] < cost[i])  
			{																		
				cost[i] = cost[start] + graph[start][i];
			}
		}
		int min = 10000;
		for (int j = 0; j < 6; j++)   
		{
			if (!sh[j] && cost[j] !=0 && cost[j] < min)			
			{														
				min = cost[j];
				start = j;
			}
		}
		sh[start] = true;		
	}
	return cost[dst];
}

2.2/

struct Disjoint
{
    int *parent, *rnk;
    int n;
    Disjoint(int n)
    {
        this->n = n;
        parent = new int[n+1];
        rnk = new int[n+1];
        for (int i = 0; i <= n; i++)
        {
            rnk[i] = 0;
            parent[i] = i;
        }
    }
    int find(int u)
    {
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }
  
    void merge(int x, int y)
    {
        x = find(x), y = find(y);
  
        if (rnk[x] > rnk[y])
            parent[y] = x;
        else 
            parent[x] = y;
        if (rnk[x] == rnk[y])
            rnk[y]++;
    }
};
  
int kruskalMST()
{
    int ms = 0; 
    sort(edges.begin(), edges.end());
    Disjoint dst(V);
    vector< pair<int, pair<int, int>> >::iterator it;
    for (it=edges.begin(); it!=edges.end(); it++)
    {
        int u = it->second.first;
        int v = it->second.second;
        int set_u = dst.find(u);
        int set_v = dst.find(v);
        if (set_u != set_v)
        {
            ms += it->first;
            dst.merge(set_u, set_v);
        }
    }
    return ms;
}

3/

class Graph {

    int V;
    Adjacency* adj;

public:
    Graph(int V){
        this->V = V;
        adj = new Adjacency[V];
    }
    void addEdge(int v, int w){
        adj[v].push(w);
    }
    
    void topo(int v, bool visited[], stack<int>& Stack)
    {
        visited[v] = true;
        for (int i = 0; i < adj[v].getSize(); i++)
            if (!visited[adj[v].getElement(i)])
                topo(adj[v].getElement(i), visited, Stack);
        Stack.push(v);
    }
      
    void topologicalSort()
    {
        stack<int> S;
        bool* v = new bool[V];
        for (int i = 0; i < V; i++)
            v[i] = false;
      
        for (int i = 0; i < V; i++)
            if (v[i] == false) 
            topo(i, v, S);
         while (S.empty() == false) {
            cout << S.top() << " ";
            S.pop();
        }
    }
};
